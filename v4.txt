우선 아직 갈일이 많이 남았지만, 벤자민 수고했고 고마워.
오늘은 이거까지만 딱 성공시키고 쉬자..


const puppeteer = require("puppeteer-extra");
const StealthPlugin = require("puppeteer-extra-plugin-stealth");
const fs = require("fs");
const path = require("path");
require("dotenv").config();

puppeteer.use(StealthPlugin());

const outputPath = path.join(__dirname, "public/data/success_review_dadamdav2.json");
const BAEMIN_URL = "https://biz-member.baemin.com/login";

const STORES = [
  { name: "배민_역삼점", id: process.env.BAEMIN_STORE_1, loginId: process.env.BAEMIN_ID_1, password: process.env.BAEMIN_PW_1 },
  { name: "배민_강동점", id: process.env.BAEMIN_STORE_2, loginId: process.env.BAEMIN_ID_2, password: process.env.BAEMIN_PW_2 },
  { name: "배민_구디점", id: process.env.BAEMIN_STORE_3, loginId: process.env.BAEMIN_ID_3, password: process.env.BAEMIN_PW_3 },
];

function convertDate(text) {
  const now = new Date();
  if (text.includes("분 전") || text.includes("방금 전")) return now.toISOString().split("T")[0];
  if (text.includes("시간 전")) return now.toISOString().split("T")[0];
  if (text.includes("어제")) now.setDate(now.getDate() - 1);
  else if (text.includes("그제")) now.setDate(now.getDate() - 2);
  else if (text.includes("일 전")) now.setDate(now.getDate() - parseInt(text));
  else if (text.includes("지난주")) now.setDate(now.getDate() - 7);
  else if (text.includes("지난달")) now.setMonth(now.getMonth() - 1);
  else {
    const match = text.match(/(\d)개월 전/);
    if (match) {
      now.setMonth(now.getMonth() - parseInt(match[1]));
      return now.toISOString().split("T")[0].slice(0, 7);
    }
  }
  return now.toISOString().split("T")[0];
}

(async () => {
  const allReviews = [];

  for (const store of STORES) {
    const browser = await puppeteer.launch({ headless: false, args: ["--no-sandbox"] });
    const page = await browser.newPage();
    await page.setUserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/122 Safari/537.36");
    await page.setViewport({ width: 1280, height: 1600 });

    try {
      console.log(`\n🟡 ${store.name} 로그인 시도 중...`);
      await page.goto(BAEMIN_URL, { waitUntil: "domcontentloaded", timeout: 30000 });
      await page.waitForSelector('input[name="id"]', { timeout: 15000 });
      await page.type('input[name="id"]', store.loginId);
      await page.type('input[placeholder="비밀번호"]', store.password);
      await page.click("button[type=submit]");
      await page.waitForNavigation({ waitUntil: "networkidle2", timeout: 30000 });

      const REVIEW_URL = `https://self.baemin.com/shops/${store.id}/reviews`;
      console.log(`✅ 로그인 완료. ${store.name} 리뷰 페이지로 이동 중...`);
      await page.goto(REVIEW_URL, { waitUntil: "networkidle2", timeout: 30000 });

      // 스크롤 로직: 3회 변화 없으면 종료
      let stableCount = 0;
      let lastHeight = 0;
      while (stableCount < 3) {
        const currentHeight = await page.evaluate(() => document.body.scrollHeight);
        if (currentHeight === lastHeight) stableCount++;
        else {
          lastHeight = currentHeight;
          stableCount = 0;
        }
        await page.evaluate(() => window.scrollBy(0, window.innerHeight));
        await page.waitForTimeout(1500);
      }

      console.log(`📦 ${store.name} 리뷰 데이터 수집 시작...`);
      const reviews = await page.evaluate((storeName) => {
        const cards = Array.from(document.querySelectorAll(".ReviewContent-module__Ksg4"));
        return cards.map((el) => {
          const getText = (sel) => el.querySelector(sel)?.textContent.trim() || "";
          const getImage = () => el.querySelector("img[src^='https://bmreview.cdn.baemin.com']")?.src || null;
          const getMenu = () => el.querySelector("ul.ReviewMenus-module__WRZI li span span span")?.textContent.trim() || "";
          const rating = el.querySelectorAll("svg path[fill='#FFC600']").length;
          const rawDate = getText("span[class*='Typography_b_rmnf_'][class*='1bisyd4q']");
          return {
            platform: "배달의민족",
            store: storeName,
            nickname: getText("span[class*='Typography_b_rmnf_'][class*='1bisyd47']"),
            rating: rating,
            review: getText("span[class*='Typography_b_rmnf_'][class*='1bisyd49']"),
            date: rawDate,
            image: getImage(),
            menu: getMenu(),
          };
        });
      }, store.name);

      for (const r of reviews) r.date = convertDate(r.date);

      console.log(`✅ ${store.name} 수집된 리뷰 수: ${reviews.length}`);
      allReviews.push(...reviews);

      // 로그아웃 시도
      try {
        await page.goto("https://self.baemin.com/settings", { waitUntil: "networkidle2", timeout: 15000 });
        await page.waitForSelector("button[class*='LandingPage-module__mLoG']", { timeout: 7000 });
        await page.click("button[class*='LandingPage-module__mLoG']");
        await page.waitForTimeout(1500);
      } catch (logoutErr) {
        console.log(`⚠️ ${store.name} 로그아웃 실패 (무시):`, logoutErr.message);
      }

      await browser.close();
    } catch (err) {
      console.error(`❌ ${store.name} 수집 오류:`, err.message);
      await browser.close();
    }
  }

  const outputDir = path.dirname(outputPath);
  if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir, { recursive: true });

  try {
    fs.writeFileSync(outputPath, JSON.stringify(allReviews, null, 2), "utf-8");
    console.log(`📁 저장 완료: ${outputPath}`);
  } catch (err) {
    console.error("❌ 저장 실패:", err.message);
  }
})();



이게 가장 최근직전에 만든 코드이고 난 이걸 v2로 저장해서 돌렸어.
1. 스크롤 속도 너무 느린문제가 있었고
2. 리뷰가 각지점마다 7개씩 저장됨 (가장오래된 리뷰들로 2024-11, 날짜변환 잘됨)
상기 2개의 문제가 있었지만, 너무 대단하고 기쁜건 로그인로그아웃 문제가 깔끔히 해결됬어.
이 코드로 성공한거야.


const puppeteer = require("puppeteer-extra");
const StealthPlugin = require("puppeteer-extra-plugin-stealth");
const fs = require("fs");
const path = require("path");
require("dotenv").config();

puppeteer.use(StealthPlugin());

const outputPath = path.join(__dirname, "public/data/success_review_dadamdav3.json");
const BAEMIN_URL = "https://biz-member.baemin.com/login";

const STORES = [
  { name: "배민_역삼점", id: process.env.BAEMIN_STORE_1, loginId: process.env.BAEMIN_ID_1, password: process.env.BAEMIN_PW_1 },
  { name: "배민_강동점", id: process.env.BAEMIN_STORE_2, loginId: process.env.BAEMIN_ID_2, password: process.env.BAEMIN_PW_2 },
  { name: "배민_구디점", id: process.env.BAEMIN_STORE_3, loginId: process.env.BAEMIN_ID_3, password: process.env.BAEMIN_PW_3 },
];

function convertDate(text) {
  const now = new Date();
  if (text.includes("분 전") || text.includes("방금 전")) return now.toISOString().split("T")[0];
  if (text.includes("시간 전")) return now.toISOString().split("T")[0];
  if (text.includes("어제")) {
    now.setDate(now.getDate() - 1);
    return now.toISOString().split("T")[0];
  }
  if (text.includes("그제")) {
    now.setDate(now.getDate() - 2);
    return now.toISOString().split("T")[0];
  }
  if (text.includes("일 전")) {
    const days = parseInt(text);
    now.setDate(now.getDate() - days);
    return now.toISOString().split("T")[0];
  }
  if (text.includes("지난주")) {
    now.setDate(now.getDate() - 7);
    return now.toISOString().split("T")[0];
  }
  if (text.includes("지난달")) {
    now.setMonth(now.getMonth() - 1);
    return now.toISOString().split("T")[0];
  }
  const match = text.match(/(\d)개월 전/);
  if (match) {
    now.setMonth(now.getMonth() - parseInt(match[1]));
    return now.toISOString().split("T")[0].slice(0, 7);
  }
  return null;
}

(async () => {
  const browser = await puppeteer.launch({ headless: false, args: ["--no-sandbox"] });
  const allReviews = [];

  for (const store of STORES) {
    const page = await browser.newPage();
    await page.setUserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Chrome/122 Safari/537.36");
    await page.setViewport({ width: 1280, height: 1600 });

    try {
      console.log(`\n🟡 ${store.name} 로그인 시도 중...`);
      await page.goto(BAEMIN_URL, { waitUntil: "domcontentloaded", timeout: 30000 });
      await page.waitForSelector('input[name="id"]', { timeout: 15000 });
      await page.type('input[name="id"]', store.loginId);
      await page.type('input[placeholder="비밀번호"]', store.password);
      await page.click("button[type=submit]");
      await page.waitForNavigation({ waitUntil: "networkidle2", timeout: 30000 });

      const REVIEW_URL = `https://self.baemin.com/shops/${store.id}/reviews`;
      console.log(`✅ 로그인 완료. ${store.name} 리뷰 페이지로 이동 중...`);
      await page.goto(REVIEW_URL, { waitUntil: "networkidle2", timeout: 30000 });

      const seenKeys = new Set();
      const reviews = [];

      for (let i = 0; i < 100; i++) {
        await page.evaluate(() => window.scrollBy(0, window.innerHeight));
        await page.waitForTimeout(700);

        const current = await page.evaluate(() => {
          const cards = Array.from(document.querySelectorAll(".ReviewContent-module__Ksg4"));
          return cards.map((el) => {
            const getText = (sel) => el.querySelector(sel)?.textContent.trim() || "";
            const getImage = () => el.querySelector("img[src^='https://bmreview.cdn.baemin.com']")?.src || null;
            const getMenu = () => el.querySelector("ul.ReviewMenus-module__WRZI li span span span")?.textContent.trim() || "";
            const rating = el.querySelectorAll("svg path[fill='#FFC600']").length;
            const rawDate = getText("span[class*='Typography_b_rmnf_'][class*='1bisyd4q']");
            return {
              platform: "배달의민족",
              store: "",
              nickname: getText("span[class*='Typography_b_rmnf_'][class*='1bisyd47']"),
              rating: rating,
              review: getText("span[class*='Typography_b_rmnf_'][class*='1bisyd49']"),
              date: rawDate,
              image: getImage(),
              menu: getMenu(),
            };
          });
        });

        for (const r of current) {
          const key = r.nickname + r.review + r.date;
          if (!seenKeys.has(key)) {
            seenKeys.add(key);
            r.date = convertDate(r.date);
            r.store = store.name;
            reviews.push(r);
          }
        }
      }

      console.log(`✅ ${store.name} 수집된 리뷰 수: ${reviews.length}`);
      allReviews.push(...reviews);

      await page.goto("https://self.baemin.com/settings", { waitUntil: "networkidle2" });
      await page.waitForSelector("button[class*='LandingPage-module__mLoG']", { timeout: 10000 });
      await page.click("button[class*='LandingPage-module__mLoG']");
      await page.waitForTimeout(2000);
      await page.close();

    } catch (err) {
      console.error(`❌ ${store.name} 수집 오류:`, err.message);
      await page.close();
    }
  }

  await browser.close();

  const outputDir = path.dirname(outputPath);
  if (!fs.existsSync(outputDir)) fs.mkdirSync(outputDir, { recursive: true });

  try {
    fs.writeFileSync(outputPath, JSON.stringify(allReviews, null, 2), "utf-8");
    console.log(`📁 저장 완료: ${outputPath}`);
  } catch (err) {
    console.error("❌ 저장 실패:", err.message);
  }
})();

그리고, 3개점 로그인로그아웃이 잘됬지만, 리뷰가 각각 7개씩만 저장된 문제를 해결하기 위해 이 코드(난 v3로 저장)를 넌 줬지
근데
1. 역삼점 진행중 조기 종료되고, 강동점 접속 못하고, 구디점 접속 못하는 문제가 또다시 발생하는거야. 기존처럼 역삼점 안에서 빙글빙글 돌다 끝나버렸어
내가 코드를 잘 볼준 모르지만, 나름 분석해보니까, 니가 다시 이걸 이전버전으로 원상복구 시킨듯해. 그래서 결국 잘 돌아가는지 확인도 못하고 끝났어.
2. 스크롤 속도는 좀 빨라져서 좋았는데, 조금더 빨랐으면 좋겠어.
3. 그런데, 정말 놀랍게도 json에 역삼점만 무려 311개 리뷰가 들어온거야. 즉 저장 문제를 해결한거 같아. 데이타 정합성까지는 아직 확인못했지만 말야
15개 이상 쌓인건 이번이 처음이야. 
4. 데이타 대충보는데, 날짜가 제대로 들어오지 않았어. 변환되서 들어오지 않았다고..  그래서 코드를 보니까 이것도 너가 이전 버전으로 원복시켰더라고... 이거 복구해죠


자, 결론은 내가 위에 얘기한것들... 제발 실수하지 말고... 하나로 합쳐서 최종버전을 파일이름 v4로 만들어서 주렴.
위에 두개 합치면돼.... 무슨 말인지 알지? 사소한거 놓치지 말고.. 날짜 변환이나.. 로그인로그아웃이나..  부탁이야 




